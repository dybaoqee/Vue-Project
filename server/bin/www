#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
var config = require('../config')
var userModel = require('../lib/user')

// 将端口号设置为配置文件的端口号，默认值为3000
var port = normalizePort(config.port || '3000');
console.log('port =' + port)
// app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());
var io = require('socket.io')(server)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on("connection", socket => {
  const socketId = socket.id
  // 登录
  socket.on("login", async username => {
    await userModel.saveUserSocketId(username, socketId)
  })
  // 更新socketId
  socket.on("update", async userId => {
    await userModel.saveUserSocketId(userId, socketId)
  })

  // 接收发送过来的消息 (相当于客户端发送消息的中转站)
  socket.on("sendMessage", async data => {
    const toUser = await userModel.getUserSocketId(data.toUser)
    const toUserSocketId = toUser.socketId
    io.emit("getMessage", data)
  })

  // 关闭
  socket.on("disconnect", data => {
    console.log('disconnect', data)
  })
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
